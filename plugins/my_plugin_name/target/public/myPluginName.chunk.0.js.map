{"version":3,"file":"myPluginName.chunk.0.js","sources":["/plugin:myPluginName/plugins/my_plugin_name/components/point_in_time_flyout/index.ts","/plugin:myPluginName/plugins/my_plugin_name/components/point_in_time_flyout/point_in_time_flyout.tsx","/plugin:myPluginName/plugins/my_plugin_name/components/point_in_time_table/index.ts","/plugin:myPluginName/plugins/my_plugin_name/components/point_in_time_table/point_in_time_table.tsx","/plugin:myPluginName/plugins/my_plugin_name/public/components/app.tsx"],"sourcesContent":["export { PointInTimeFlyout } from './point_in_time_flyout';","import React, { Fragment, useEffect, useState } from 'react';\nimport { EuiFlyout, EuiFlyoutBody, EuiFlyoutFooter, EuiFlyoutHeader, EuiButtonEmpty, EuiButton, EuiText, EuiTitle, EuiForm, EuiFormRow, EuiSelect, EuiFlexGroup, EuiFlexItem, EuiLoadingSpinner, EuiCallOut, EuiSpacer, EuiFieldText, EuiRange, EuiCheckbox } from '@elastic/eui';\nimport { FormattedMessage } from '@osd/i18n/react';\nimport { useOpenSearchDashboards } from '../../../../src/plugins/opensearch_dashboards_react/public';\nexport async function getIndexPatterns(savedObjectsClient) {\n  return savedObjectsClient.find({\n    type: 'index-pattern',\n    fields: ['title', 'type'],\n    perPage: 10000\n  }).then(response => response.savedObjects.map(pattern => {\n    const id = pattern.id;\n    const title = pattern.get('title');\n    return {\n      id,\n      title,\n      // the prepending of 0 at the default pattern takes care of prioritization\n      // so the sorting will but the default index on top\n      // or on bottom of a the table\n      sort: `${title}`\n    };\n  }).sort((a, b) => {\n    if (a.sort < b.sort) {\n      return -1;\n    } else if (a.sort > b.sort) {\n      return 1;\n    } else {\n      return 0;\n    }\n  })) || [];\n}\nexport async function findByTitle(client, title) {\n  if (title) {\n    const savedObjects = await client.find({\n      type: 'point-in-time',\n      perPage: 1000,\n      fields: ['id']\n    });\n    return savedObjects.savedObjects.find(obj => obj.attributes.id.toLowerCase() === title.toLowerCase());\n  }\n}\nexport async function createSavedObject(pointintime, client, reference) {\n  const dupe = await findByTitle(client, pointintime.id);\n  console.log(dupe); // throw new Error(`Duplicate Point in time: ${pointintime.id}`);\n  // if (dupe) {\n  //     if (override) {\n  //         await this.delete(dupe.id);\n  //     } else {\n  //         throw new DuplicateIndexPatternError(`Duplicate index pattern: ${indexPattern.title}`);\n  //     }\n  // }\n\n  const body = pointintime;\n  const references = [{ ...reference,\n    name: 'index-pattern'\n  }];\n  const savedObjectType = 'point-in-time';\n  const response = await client.create(savedObjectType, body, {\n    id: pointintime.id,\n    references\n  });\n  console.log(response);\n  pointintime.id = response.id;\n  return pointintime;\n}\nexport const PointInTimeFlyout = () => {\n  const [isFlyoutVisible, setIsFlyoutVisible] = useState(false);\n  const [showErrors, setShowErrors] = useState(false);\n  const [value, setValue] = useState('24');\n  const [checked, setChecked] = useState(false);\n\n  const onChange = e => {\n    setValue(e.target.value);\n  };\n\n  const [loading, setLoading] = useState(true);\n  const [indexPatterns, setIndexPatterns] = useState([]);\n  const {\n    setBreadcrumbs,\n    savedObjects,\n    uiSettings,\n    chrome,\n    docLinks,\n    application,\n    http,\n    data\n  } = useOpenSearchDashboards().services;\n  console.log(useOpenSearchDashboards().services);\n  console.log(savedObjects);\n  useEffect(() => {\n    (async function () {\n      const gettedIndexPatterns = await getIndexPatterns(savedObjects.client);\n      const names = gettedIndexPatterns.map(function (item) {\n        return item.title;\n      });\n      setIndexPatterns(gettedIndexPatterns);\n      console.log(gettedIndexPatterns);\n      setLoading(false);\n    })();\n  }, [savedObjects.client]);\n\n  const createPointInTime = () => {\n    // setIsFlyoutVisible(false);\n    const pit = {\n      name: 'testing',\n      keepAlive: '24',\n      id: \"o463QQEKdGVzdF9pbmRleBZnSG5VR0dKWVJybW1QZzJRNzJ0YU1RABZBb2lZV2Y4clFBV1NQNnBjNUxCMHh3AAAAAAAAAAIOFkE1NXgtM3JLUjJxdExXc0lzd3lQQ2cBFmdIblVHR0pZUnJtbVBnMlE3MnRhTVEAAA==\"\n    };\n    const reference = {\n      id: indexPatterns[0].id,\n      type: 'index-pattern',\n      name: indexPatterns[0].title\n    };\n    createSavedObject(pit, savedObjects.client, reference);\n  }; // useEffect(() => {\n  //     const gettedIndexPatterns: PointInTimeFlyoutItem[] = getIndexPatterns(\n  //                     savedObjects.client\n  //                 );\n  //                 console.log(gettedIndexPatterns);\n  // });\n\n\n  const renderBody = _ref => {\n    let {\n      data,\n      isLoading,\n      hasPrivilegeToRead\n    } = _ref;\n    console.log(savedObjects);\n\n    if (isLoading) {\n      return /*#__PURE__*/React.createElement(EuiFlexGroup, {\n        justifyContent: \"spaceAround\"\n      }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n        grow: false\n      }, /*#__PURE__*/React.createElement(EuiLoadingSpinner, {\n        size: \"xl\"\n      })));\n    }\n\n    if (!hasPrivilegeToRead) {\n      return /*#__PURE__*/React.createElement(EuiCallOut, {\n        title: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"telemetry.callout.errorUnprivilegedUserTitle\",\n          defaultMessage: \"Error displaying cluster statistics\"\n        }),\n        color: \"danger\",\n        iconType: \"cross\"\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"telemetry.callout.errorUnprivilegedUserDescription\",\n        defaultMessage: \"You do not have access to see unencrypted cluster statistics.\"\n      }));\n    }\n\n    if (data === null) {\n      return /*#__PURE__*/React.createElement(EuiCallOut, {\n        title: /*#__PURE__*/React.createElement(FormattedMessage, {\n          id: \"telemetry.callout.errorLoadingClusterStatisticsTitle\",\n          defaultMessage: \"Error loading cluster statistics\"\n        }),\n        color: \"danger\",\n        iconType: \"cross\"\n      }, /*#__PURE__*/React.createElement(FormattedMessage, {\n        id: \"telemetry.callout.errorLoadingClusterStatisticsDescription\",\n        defaultMessage: \"An unexpected error occured while attempting to fetch the cluster statistics. This can occur because OpenSearch failed, OpenSearch Dashboards failed, or there is a network error. Check OpenSearch Dashboards, then reload the page and try again.\"\n      }));\n    }\n\n    const onButtonClick = () => {\n      setShowErrors(!showErrors);\n    }; // const button = (\n    //     <EuiButton fill color=\"danger\" onClick={onButtonClick}>\n    //         Toggle errors\n    //     </EuiButton>\n    // );\n\n\n    const onCheckboxChange = e => {\n      setChecked(e.target.checked);\n    };\n\n    let errors;\n    return /*#__PURE__*/React.createElement(Fragment, null, /*#__PURE__*/React.createElement(EuiForm, {\n      isInvalid: showErrors,\n      error: errors,\n      component: \"form\"\n    }, /*#__PURE__*/React.createElement(EuiFormRow, {\n      isInvalid: showErrors,\n      fullWidth: true\n    }, /*#__PURE__*/React.createElement(EuiText, null, /*#__PURE__*/React.createElement(\"p\", null, \"Create point in time search based on existing index pattern\"))), /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Data source\",\n      isInvalid: showErrors,\n      fullWidth: true\n    }, /*#__PURE__*/React.createElement(EuiSelect, {\n      fullWidth: true,\n      options: indexPatterns.map(option => {\n        return {\n          text: option.title,\n          value: option.id\n        };\n      }),\n      isInvalid: showErrors,\n      isLoading: loading\n    })), /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Custom Point in time name\",\n      isInvalid: showErrors,\n      fullWidth: true\n    }, /*#__PURE__*/React.createElement(EuiFieldText, {\n      fullWidth: true,\n      name: \"name\",\n      isInvalid: showErrors\n    })), /*#__PURE__*/React.createElement(EuiFormRow, {\n      label: \"Expiration in\",\n      isInvalid: showErrors,\n      fullWidth: true\n    }, /*#__PURE__*/React.createElement(EuiRange // min={100}\n    , {\n      max: 24,\n      step: 0.05,\n      fullWidth: true,\n      value: value,\n      onChange: onChange,\n      showLabels: true,\n      showValue: true,\n      \"aria-label\": \"An example of EuiRange with showLabels prop\"\n    })), /*#__PURE__*/React.createElement(EuiFormRow, {\n      isInvalid: showErrors,\n      fullWidth: true\n    }, /*#__PURE__*/React.createElement(EuiCheckbox, {\n      id: \"checkbox\",\n      label: \"The PIT will be automatically deleted at the expiry time\",\n      checked: checked,\n      onChange: e => onCheckboxChange(e)\n    })), /*#__PURE__*/React.createElement(EuiSpacer, null))); // return <EuiCodeBlock language=\"js\">{JSON.stringify(data, null, 2)}</EuiCodeBlock>;\n  };\n\n  let flyout;\n\n  if (isFlyoutVisible) {\n    flyout = /*#__PURE__*/React.createElement(EuiFlyout, {\n      ownFocus: true,\n      onClose: () => setIsFlyoutVisible(false),\n      size: \"m\",\n      paddingSize: \"m\"\n    }, /*#__PURE__*/React.createElement(EuiFlyoutHeader, {\n      hasBorder: true\n    }, /*#__PURE__*/React.createElement(EuiTitle, {\n      size: \"m\"\n    }, /*#__PURE__*/React.createElement(\"h2\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n      id: \"savedObjectsManagement.objectsTable.flyout.importSavedObjectTitle\",\n      defaultMessage: \"Create point in time\"\n    })))), /*#__PURE__*/React.createElement(EuiFlyoutBody, null, renderBody({\n      data: '',\n      isLoading: false,\n      hasPrivilegeToRead: true\n    })), /*#__PURE__*/React.createElement(EuiFlyoutFooter, null, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n      justifyContent: \"spaceBetween\"\n    }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButtonEmpty, {\n      iconType: \"cross\",\n      onClick: () => setIsFlyoutVisible(false),\n      flush: \"left\"\n    }, \"Close\")), /*#__PURE__*/React.createElement(EuiFlexItem, {\n      grow: false\n    }, /*#__PURE__*/React.createElement(EuiButton, {\n      onClick: createPointInTime,\n      fill: true\n    }, \"Save\")))));\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(EuiButton, {\n    onClick: () => setIsFlyoutVisible(true),\n    iconType: \"plusInCircle\",\n    fill: true\n  }, \"Create point in time\"), flyout);\n};\n\nfunction useGeneratedHtmlId(arg0) {\n  throw new Error('Function not implemented.');\n}","export { PointInTimeTableWithRouter } from './point_in_time_table';","/*\n * SPDX-License-Identifier: Apache-2.0\n *\n * The OpenSearch Contributors require contributions made to\n * this file be licensed under the Apache-2.0 license or a\n * compatible open source license.\n *\n * Any modifications Copyright OpenSearch Contributors. See\n * GitHub history for details.\n */\nimport { EuiFlexGroup, EuiFlexItem, EuiInMemoryTable, EuiSpacer, EuiText, EuiPageContent, EuiTitle, EuiButton } from '@elastic/eui';\nimport { FormattedMessage } from '@osd/i18n/react';\nimport { withRouter } from 'react-router-dom';\nimport React, { useState, useRef } from 'react';\nimport { i18n } from '@osd/i18n';\nimport { PointInTimeFlyout } from '../point_in_time_flyout';\nconst pagination = {\n  initialPageSize: 10,\n  pageSizeOptions: [5, 10, 25, 50]\n};\nconst sorting = {\n  sort: {\n    field: 'title',\n    direction: 'asc'\n  }\n};\nconst ariaRegion = i18n.translate('indexPatternManagement.editIndexPatternLiveRegionAriaLabel', {\n  defaultMessage: 'Point in time'\n});\nconst title = i18n.translate('indexPatternManagement.indexPatternTable.title', {\n  defaultMessage: 'Point in time'\n});\nconst item1 = {\n  id: 'id1',\n  title: 'pit1',\n  default: false,\n  sort: '0pit1'\n};\nconst item2 = {\n  id: 'id2',\n  title: 'pit2',\n  default: false,\n  sort: '1pit2'\n};\nexport const PointInTimeTable = _ref => {\n  let {\n    canSave,\n    history\n  } = _ref;\n  const [error, setError] = useState();\n  const tableRef = useRef();\n  const [pits, setPits] = useState([item1, item2]);\n  const [selection, setSelection] = useState([]); // const renderToolsLeft = () => {\n  //     if (selection.length === 0) {\n  //         return;\n  //     }\n  //     const onClick = () => {\n  //         //store.deleteUsers(...selection.map((user) => user.id));\n  //         for(const id of selection) {\n  //             const findIndex = pits.findIndex(a => a.id === id.id)\n  //             findIndex !== -1 && pits.splice(findIndex , 1)\n  //             setPits(pits);\n  //             console.log(id);\n  //         }\n  //         setSelection([]);\n  //     };\n  //     return (\n  //         <EuiButton color=\"danger\" iconType=\"trash\" onClick={onClick}>\n  //             Delete {selection.length} point in time searches\n  //         </EuiButton>\n  //     );\n  // };\n\n  const renderToolsRight = () => {\n    const onClick = () => {\n      //store.deleteUsers(...selection.map((user) => user.id));\n      for (const id of selection) {\n        const findIndex = pits.findIndex(a => a.id === id.id);\n        findIndex !== -1 && pits.splice(findIndex, 1);\n        setPits(pits);\n        console.log(id);\n      }\n\n      setSelection([]);\n    };\n\n    return /*#__PURE__*/React.createElement(EuiButton, {\n      color: \"danger\",\n      iconType: \"trash\",\n      onClick: onClick,\n      isDisabled: selection.length === 0\n    }, \"Delete\"); // return [\n    //     <EuiButton\n    //         key=\"loadUsers\"\n    //         onClick={() => {\n    //             //loadUsers();\n    //         }}\n    //         isDisabled={selection.length === 0}\n    //     >\n    //         Load Users\n    //     </EuiButton>,\n    //     <EuiButton\n    //         key=\"loadUsersError\"\n    //         onClick={() => {\n    //             //loadUsersWithError();\n    //         }}\n    //         isDisabled={false}\n    //     >\n    //         Load Users (Error)\n    //     </EuiButton>,\n    // ];\n  };\n\n  const search = {\n    toolsRight: renderToolsRight(),\n    box: {\n      incremental: true,\n      schema: {\n        fields: {\n          title: {\n            type: 'string'\n          }\n        }\n      }\n    }\n  };\n  const selectionValue = {\n    selectable: () => true,\n    selectableMessage: selectable => !selectable ? 'User is currently offline' : undefined,\n    onSelectionChange: selection => setSelection(selection),\n    initialSelected: []\n  }; // const {\n  //     savedObjects,\n  //     uiSettings,\n  //     chrome,\n  //     docLinks,\n  //     application,\n  //     http,\n  //     data,\n  // } = useOpenSearchDashboards<PointInTimeManagmentContext>().services;\n  // useEffect(() => {\n  // }, []);\n  // const loadSources = () => {\n  // };\n  // useEffect(() => {\n  // }, []);\n\n  const columns = [{\n    field: 'title',\n    name: 'Name',\n    render: (title, object) => {\n      return /*#__PURE__*/React.createElement(\"span\", null, object.title);\n    },\n    dataType: 'string',\n    sortable: _ref2 => {\n      let {\n        sort\n      } = _ref2;\n      return sort;\n    }\n  }]; // return (\n  //     <EuiPageContent data-test-subj=\"pointInTimeTable\" role=\"region\" aria-label={ariaRegion}>\n  //       <EuiFlexGroup justifyContent=\"spaceBetween\">\n  //         <EuiFlexItem grow={false}>\n  //           <EuiTitle>\n  //             <h2>{title}</h2>\n  //           </EuiTitle>\n  //           <EuiSpacer size=\"s\" />\n  //           <EuiText>\n  //             <p>\n  //               <FormattedMessage\n  //                 id=\"indexPatternManagement.indexPatternTable.indexPatternExplanation\"\n  //                 defaultMessage=\"Create and manage point in time.\"\n  //               />\n  //             </p>\n  //           </EuiText>\n  //         </EuiFlexItem>\n  //         <EuiFlexItem grow={false}><PointInTimeFlyout/></EuiFlexItem>\n  //       </EuiFlexGroup>\n  //       <EuiSpacer />\n  //       <EuiInMemoryTable\n  //             allowNeutralSort={false}\n  //             itemId=\"id\"\n  //             isSelectable={true}\n  //             items={pits}\n  //             columns={columns1}\n  //             pagination={pagination}\n  //             sorting={sorting}\n  //             search={search}\n  //             selection={selectionValue}\n  //         />\n  //     </EuiPageContent>\n  //   );\n\n  return /*#__PURE__*/React.createElement(EuiPageContent, {\n    \"data-test-subj\": \"pointInTimeTable\",\n    role: \"region\",\n    \"aria-label\": ariaRegion\n  }, /*#__PURE__*/React.createElement(EuiFlexGroup, {\n    justifyContent: \"spaceBetween\"\n  }, /*#__PURE__*/React.createElement(EuiFlexItem, {\n    grow: false\n  }, /*#__PURE__*/React.createElement(EuiTitle, null, /*#__PURE__*/React.createElement(\"h2\", null, title)), /*#__PURE__*/React.createElement(EuiSpacer, {\n    size: \"s\"\n  }), /*#__PURE__*/React.createElement(EuiText, null, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(FormattedMessage, {\n    id: \"indexPatternManagement.indexPatternTable.indexPatternExplanation\",\n    defaultMessage: \"Create and manage the point in time searches that help you retrieve your data from OpenSearch.\"\n  })))), /*#__PURE__*/React.createElement(EuiFlexItem, {\n    grow: false\n  }, /*#__PURE__*/React.createElement(PointInTimeFlyout, null))), /*#__PURE__*/React.createElement(EuiSpacer, null), /*#__PURE__*/React.createElement(EuiInMemoryTable, {\n    allowNeutralSort: false,\n    itemId: \"id\",\n    isSelectable: true,\n    items: pits,\n    columns: columns,\n    pagination: pagination,\n    sorting: sorting,\n    search: search,\n    selection: selectionValue\n  }));\n};\nexport const PointInTimeTableWithRouter = withRouter(PointInTimeTable);","import React, { useState } from 'react';\nimport { i18n } from '@osd/i18n';\nimport { I18nProvider } from '@osd/i18n/react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { PointInTimeTableWithRouter } from '../../components/point_in_time_table';\nimport { OpenSearchDashboardsContextProvider } from '../../../../src/plugins/opensearch_dashboards_react/public';\nexport const MyPluginNameApp = _ref => {\n  let {\n    basename,\n    notifications,\n    http,\n    navigation,\n    savedObjects,\n    data\n  } = _ref;\n  // Use React hooks to manage state.\n  const [timestamp, setTimestamp] = useState();\n\n  const onClickHandler = () => {\n    // Use the core http service to make a response to the server API.\n    http.get('/api/my_plugin_name/example').then(res => {\n      setTimestamp(res.time); // Use the core notifications service to display a success message.\n\n      notifications.toasts.addSuccess(i18n.translate('myPluginName.dataUpdated', {\n        defaultMessage: 'Data updated'\n      }));\n    });\n  };\n\n  const deps = {\n    savedObjects,\n    notifications,\n    http,\n    data\n  }; // Render the application DOM.\n  // Note that `navigation.ui.TopNavMenu` is a stateful component exported on the `navigation` plugin's start contract.\n  // return (\n  //   <Router basename={basename}>\n  //     <I18nProvider>\n  //       <>\n  //         <navigation.ui.TopNavMenu\n  //           appName={PLUGIN_ID}\n  //           showSearchBar={true}\n  //           useDefaultBehaviors={true}\n  //         />\n  //         <EuiPage restrictWidth=\"1000px\">\n  //           <EuiPageBody component=\"main\">\n  //             <EuiPageHeader>\n  //               <EuiTitle size=\"l\">\n  //                 <h1>\n  //                   <FormattedMessage\n  //                     id=\"myPluginName.helloWorldText\"\n  //                     defaultMessage=\"{name}\"\n  //                     values={{ name: PLUGIN_NAME }}\n  //                   />\n  //                 </h1>\n  //               </EuiTitle>\n  //             </EuiPageHeader>\n  //             <EuiPageContent>\n  //               <EuiPageContentHeader>\n  //                 <EuiTitle>\n  //                   <h2>\n  //                     <FormattedMessage\n  //                       id=\"myPluginName.congratulationsTitle\"\n  //                       defaultMessage=\"Congratulations, you have successfully created a new OpenSearch Dashboards Plugin 11!\"\n  //                     />\n  //                   </h2>\n  //                 </EuiTitle>\n  //               </EuiPageContentHeader>\n  //               <EuiPageContentBody>\n  //                 <EuiText>\n  //                   <p>\n  //                     <FormattedMessage\n  //                       id=\"myPluginName.content\"\n  //                       defaultMessage=\"Look through the generated code and check out the plugin development documentation 1.\"\n  //                     />\n  //                   </p>\n  //                   <EuiHorizontalRule />\n  //                   <p>\n  //                     <FormattedMessage\n  //                       id=\"myPluginName.timestampText\"\n  //                       defaultMessage=\"Last timestamp: {time}\"\n  //                       values={{ time: timestamp ? timestamp : 'Unknown' }}\n  //                     />\n  //                   </p>\n  //                   <EuiButton type=\"primary\" size=\"s\" onClick={onClickHandler}>\n  //                     <FormattedMessage id=\"myPluginName.buttonText\" defaultMessage=\"Get data\" />\n  //                   </EuiButton>\n  //                 </EuiText>\n  //               </EuiPageContentBody>\n  //             </EuiPageContent>\n  //           </EuiPageBody>\n  //         </EuiPage>\n  //       </>\n  //     </I18nProvider>\n  //   </Router>\n  // );\n\n  return /*#__PURE__*/React.createElement(Router, {\n    basename: basename\n  }, /*#__PURE__*/React.createElement(OpenSearchDashboardsContextProvider, {\n    services: deps\n  }, /*#__PURE__*/React.createElement(I18nProvider, null, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PointInTimeTableWithRouter, {\n    canSave: true\n  })))));\n};"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvsourceRoot":""}